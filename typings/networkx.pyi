from typing import Any, Callable, Dict, Generic, Iterable, Iterator, Literal, Tuple, TypeVar, overload

N = TypeVar("N")
K = TypeVar("K")

class NodeView(Generic[N]):
    def __call__(self, data: Literal[True]) -> Any: ...
    def __getitem__(self, node: N) -> Dict[str, Any]: ...
    def __iter__(self) -> Iterator[N]: ...

class Graph(Generic[N]):
    def add_edge(self, u_of_edge: N, v_of_edge: N, **attr: Any) -> None: ...
    def add_node(self, node: N, **attr: Any) -> None: ...
    @property
    def nodes(self) -> NodeView[N]: ...
    @property
    def edges(self) -> Any: ...
    def __getitem__(self, node: N) -> N: ...

class DiGraph(Generic[N]):
    def add_node(self, node_for_adding: N, **attr: Any) -> None: ...
    def add_edge(self, u_of_edge: N, v_of_edge: N, **attr: Any) -> None: ...
    def has_edge(self, u: N, v: N) -> bool: ...
    @overload
    def edges(self, data: Literal[True]) -> Iterable[Tuple[N, N, Dict[str, Any]]]: ...
    @overload
    def edges(self) -> Iterable[Tuple[N, N]]: ...
    def __getitem__(self, n: N) -> Dict[N, Dict[str, Any]]: ...
    @property
    def nodes(self) -> NodeView[N]: ...
    def predecessors(self, node: N) -> Iterable[N]: ...
    @property
    def adj(self) -> Dict[N, Dict[N, Dict[str, Any]]]: ...

class MultiDiGraph(Generic[N, K]):
    def add_node(self, node_for_adding: N) -> None: ...
    def add_edge(self, u_for_edge: N, v_for_edge: N, key: K, **attr: Any) -> K: ...
    def out_edges(
        self, node: N, keys: Literal[True], data: Literal[True]
    ) -> Iterable[Tuple[N, N, K, Dict[str, Any]]]: ...
    def edges(self, data: Literal[True]) -> Iterable[Tuple[N, N, Dict[str, Any]]]: ...

def ancestors(graph: DiGraph[N], node: N) -> Iterable[N]: ...
def shortest_path_length(graph: DiGraph[N], source: N, target: N, weight: str) -> Any: ...
def parse_edgelist(lines: Iterable[str], create_using: DiGraph[N], nodetype: Callable[[str], N], data: Tuple[()]) -> DiGraph[N]: ...
def simple_cycles(graph: DiGraph[N]) -> Iterable[Iterable[N]]: ...

def spring_layout(graph: DiGraph[N]) -> Dict[N, Tuple[float, float]]: ...
