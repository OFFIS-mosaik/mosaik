from typing import Any, Dict, Generic, Hashable, Iterable, List, Literal, Tuple, TypeVar, Union


Node = TypeVar('Node', bound=Hashable)
EdgeData = TypeVar('EdgeData')

class DiGraph(Generic[Node, EdgeData]):
    def __getitem__(self, fro: Node) -> Dict[Node, EdgeData]: ...
    def add_edge(self, fro: Node, to: Node, **kwargs) -> None: ...
    def add_edges_from(self, ebunch_to_add: Iterable[Union[Tuple[Node, Node], Tuple[Node, Node, EdgeData]]]) -> None: ...
    def add_node(self, node: Node) -> None: ...
    def copy(self) -> DiGraph[Node, EdgeData]: ...
    @property
    def edges(self) -> OutEdgeView[Node, EdgeData]: ...
    def get_edge_data(self, fro: Node, to: Node) -> EdgeData: ...
    def has_edge(self, fro: Node, to: Node) -> bool: ...
    def in_degree(self, node: Node) -> int: ...
    def out_degree(self, node: Node) -> int: ...
    def predecessors(self, node: Node) -> Iterable[Node]: ...
    def remove_edges_from(self, nodes: Iterable[Tuple[Node, Node]]) -> None: ...
    def successors(self, node: Node) -> Iterable[Node]: ...


class Graph(Generic[Node]):
    def add_node(self, node: Node, **kwargs) -> None: ...
    def add_edge(self, fro: Node, to: Node) -> None: ...

def all_simple_edge_paths(G: DiGraph[Node, Any], fro: Node, to: Node) -> Iterable[Iterable[Tuple[Node, Node]]]: ...

def ancestors(G: DiGraph[Node, Any], node: Node) -> Iterable[Node]: ...

def degree(G: DiGraph[Node, Any]) -> Iterable[Tuple[Node, int]]: ...

def get_node_attributes(G: Graph[Node], name: str) -> Dict[Node, Any]: ...

def simple_cycles(G: DiGraph[Node, Any]) -> Iterable[List[Node]]: ...

def topological_sort(G: DiGraph[Node, Any]) -> Iterable[Node]: ...

class OutEdgeView(Generic[Node, EdgeData]):
    def data(self, data: Literal[True] = True): Iterable[Tuple[Node, Node, EdgeData]]
    ...