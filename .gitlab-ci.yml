variables:
  UV_CACHE_DIR: "$CI_PROJECT_DIR/.cache/uv"

stages:
 - Tests
 - Release

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_REF_PROTECTED == "true"

default:
  image: rye
  tags: [prepared-rye]
  cache:
    paths:
      - .cache/uv

Unit tests:
  stage: Tests
  parallel:
    matrix:
      - PYTHON: ["3.8", "3.9", "3.10", "3.11", "3.12"]
  before_script:
    - rye pin $PYTHON
    - rye sync
  script:
    - rye test -- --junit-xml=pytest.xml --cov=mosaik --cov-report xml --cov-report term
  artifacts:
    when: always
    reports:
      junit: pytest.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  coverage: /TOTAL.* (\d+.?\d*)%/
  rules:
    - if: '$CI_COMMIT_TAG == null'
  needs: []

Benchmark tests:
  allow_failure: true
  stage: Tests
  before_script:
    - rye pin 3.12
    - rye sync
  script:
    - rye test -- --benchmarks tests/test_benchmarks.py
  rules:
    - if: '$CI_COMMIT_TAG == null'
      when: manual
  needs: []

Linting:
  allow_failure: true
  stage: Tests
  script:
    - rye lint -- --output-format=gitlab > lintreport.json
  artifacts:
    when: always
    reports:
      codequality: lintreport.json
  rules:
    - if: '$CI_COMMIT_TAG == null'
  needs: []

Formatting:
  allow_failure: true
  stage: Tests
  script:
    - rye format --check
  rules:
    - if: '$CI_COMMIT_TAG == null'
  needs: []

Type checking:
  allow_failure: true
  stage: Tests
  before_script:
    - rye sync
  script:
    - pyright --outputjson > typecheck_raw.json
  after_script:
    - pyright-to-gitlab-ci --source typecheck_raw.json --output typecheck.json --base_path .
  artifacts:
    when: always
    reports:
      codequality: typecheck.json

# Basic job to upload the newly tagged version of mosaik to pypi. The server can be chosen, i.e., the test or production server.
.pypi:
  script:
    - echo "Publishing version tagged $CI_COMMIT_TAG"
    - echo "Check that tag exists on master branch"
    - git fetch origin master --tags
    - git branch --contains $CI_COMMIT_TAG | grep remotes/origin/master
    - rye build
    - rye publish --repository-url "$REPOSITORY_URL" --token $TWINE_TOKEN --yes
    - touch pypi.env
    - echo "PACKAGE_VERSION=$(rye version)" >> pypi.env
  artifacts:
    reports:
      dotenv: pypi.env
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
  needs: []

# Release the newly tagged version of mosaik on the test instance of pypi.
Test release:
  extends: .pypi
  stage: Release
  variables:
    REPOSITORY_URL: https://test.pypi.org/legacy/
    TWINE_TOKEN: $MOSAIK_TEST_PYPI_TOKEN

# Release the newly tagged version of mosaik on pypi.
PyPI release:
  extends: .pypi
  stage: Release
  variables:
    REPOSITORY_URL: https://upload.pypi.org/legacy/
    TWINE_TOKEN: $MOSAIK_PYPI_PASSWORD

GitLab release:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: Release
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "Creating GitLab release for $PACKAGE_VERSION"
  needs:
    - job: PyPI release
      artifacts: true
  release:
    tag_name: $CI_COMMIT_TAG
    description: $CI_COMMIT_TAG_MESSAGE
    assets:
      links:
        - name: PyPI download page
          url: https://pypi.org/project/mosaik/$PACKAGE_VERSION/#files
          link_type: package
  cache:
    paths: []

# Execute the pipeline from the mosaik demo project
mosaik demo:
  stage: Tests
  variables:
    UPSTREAM_BRANCH: $CI_COMMIT_REF_NAME # pass the branch name to the downstream pipeline to check out the correct mosaik version
  trigger:
    project: mosaik/examples/mosaik-demo
    branch: master
  rules:
    - if: $CI_COMMIT_TAG
    - when: manual
      allow_failure: true
