image: python:3.9

.cache:
 paths:
  - venv/
  
variables:
  DOCKER_CONTAINER: "mycontainer"
  TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest
  VERSION_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG

stages:
 - install_dependencies
 - unit_tests
 - benchmarks
 - build_docker
 - run_docker
 - release
 - Trigger-cross-projects 

Job_install_dependencies:
    stage: install_dependencies
    before_script:
      - python -V
      - apt-get update -q -y 
    script:
     - pip install -U virtualenv
     - virtualenv venv
     - source venv/bin/activate
     - pip install -r requirements.txt
     - rm -rf dist
     - rm -rf build
     - python setup.py bdist_wheel sdist
     - pip install .
    artifacts:
     paths:
      - venv/
      - venv/bin/
      - venv/bin/bash/
      - dist/
      - build/
     expire_in: 60 minutes
    except:
        - tags

Job_unit_tests:
    image: fkrull/multi-python
    stage: unit_tests
    script:
      - tox
    except:
      - tags 

Job_benchmarks:
    image: fkrull/multi-python
    stage: benchmarks
    allow_failure: true
    script:
      - tox -c tox-benchmark.ini
    rules:
      - when: manual 
    
Linting_flake8:
    allow_failure: true
    stage: unit_tests
    before_script:
       - python -m pip install --quiet --upgrade flake8
    script:
       - flake8 --statistics --max-line-length=85 --extend-ignore=E306,E501 --exclude=venv*,docs*,tests*,build*,dist* ./mosaik/
    when: manual 
     
build_docker_preproduction:
   image: docker:latest
   stage: build_docker
   services:
    - docker:dind
   before_script:
    - docker --version
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
   script:
    - docker build --pull -t $TEST_IMAGE .
    - docker push $TEST_IMAGE
   only:
     - develop
 
run_docker_preproduction:
   image: docker:latest
   stage: run_docker
   services:
    - docker:dind
   before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
   script:
    - docker pull $TEST_IMAGE
    - docker tag $TEST_IMAGE myimage
    - docker run --name $DOCKER_CONTAINER myimage
    - docker stop $DOCKER_CONTAINER
   after_script:
    - docker info
   only:
     - develop
     
build_docker_production:
   image: docker:latest
   stage: build_docker
   services:
    - docker:dind
   before_script:
    - docker --version
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
   script:
    - docker build --pull -t $RELEASE_IMAGE .
    - docker push $RELEASE_IMAGE
   only:
     - master
   
run_docker_production:
   image: docker:latest
   stage: run_docker
   services:
    - docker:dind
   before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
   script:
    - docker pull $RELEASE_IMAGE
    - docker tag $RELEASE_IMAGE myimage
    - docker run --name $DOCKER_CONTAINER myimage
    - docker stop $DOCKER_CONTAINER
   after_script:
    - docker info
   only:
     - master
   
pypi:
  stage: release
  variables:
    TWINE_USERNAME: $MOSAIK_PYPI_USER
    TWINE_PASSWORD: $MOSAIK_PYPI_PASSWORD
  before_script:
      - echo 'version name is = '
      - echo ${CI_COMMIT_TAG}
      - echo ${CI_COMMIT_REF_NAME}
  script:
      - pip install -U twine wheel setuptools
      - rm -rf dist
      - rm -rf build
      - python setup.py check sdist bdist  # This will fail if your credentials are wrong.
      - ls
      - rm -rf dist
      - rm -rf build
      - ls
      - python setup.py sdist bdist_wheel
      - twine check dist/*
      - echo $PYPI_USER
      - twine upload --repository-url https://upload.pypi.org/legacy/ --username $MOSAIK_PYPI_USER --password $MOSAIK_PYPI_PASSWORD dist/*
  only:
     - tags
  
build_docker_tag:
   image: docker:latest
   stage: build_docker
   services:
    - docker:dind
   before_script:
    - docker --version
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
   script:
    - docker build --pull -t $VERSION_IMAGE .
    - docker push $VERSION_IMAGE
   only:
     - tags
 
run_docker_tag:
   image: docker:latest
   stage: run_docker
   services:
    - docker:dind
   before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
   script:
    - docker pull $VERSION_IMAGE
    - docker tag $VERSION_IMAGE myimage
    - docker run --name $DOCKER_CONTAINER myimage
    - docker stop $DOCKER_CONTAINER
   after_script:
    - docker info
   only:
     - tags
     
mosaik-demo:
   stage: Trigger-cross-projects
   trigger: 
    project: mosaik/examples/mosaik-demo
    branch: master  
   only:
     - tags
